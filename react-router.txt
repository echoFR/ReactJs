一. 组件

（1）<BrowserRouter>        router-demo2
1. 使用了HTML5 history的高阶路由组件，保证UI界面和URl保持同步
2. 属性
1) basename: string
作用：为所有位置添加一个基准URL
使用场景：假如你需要把页面部署到服务器的二级目录，你可以使用 basename 设置到此目录。
basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠。
<BrowserRouter basename="/minooo" />
<Link to="/react" /> // 最终渲染为 <a href="/minooo/react">
2) getUserConfirmation: func
作用：导航到此页面前执行的函数，默认使用 window.confirm
使用场景：当需要用户进入页面前执行什么操作时可用，不过一般用到的不多。
eg: 当从 /a 导航至 /b 时，会使用默认的 confirm 函数弹出一个提示，
用户点击确定后才进行导航，否则不做任何处理。译注：需要配合 <Prompt> 一起使用
const getConfirmation = (message, callback) => {
  const allowTransition = window.confirm(message)
  callback(allowTransition)
}
<BrowserRouter getUserConfirmation={getConfirmation('Are you sure?', yourCallBack)} />
3) forceRefresh: bool
作用：当浏览器不支持 HTML5 的 history API 时强制刷新页面。
使用场景：同上。
const supportsHistory = 'pushState' in window.history
<BrowserRouter forceRefresh={!supportsHistory} />
如果为 true ，在导航的过程中整个页面将会刷新。
一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能。
4) keyLength: number
作用：设置它里面路由的 location.key 的长度。默认是6。
//key的作用：点击同一个链接时，每次该路由下的 location.key都会改变，可以通过 key 的变化来刷新页面。
使用场景：按需设置。
<BrowserRouter keyLength={12} />
5) children: node
作用：渲染唯一子元素。
使用场景：作为一个 Reac t组件，天生自带 children 属性。

(2) <HashRouter>
使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步
Hash history 不支持 location.key 和 location.state。
另外由于该技术只是用来支持旧版浏览器，因此更推荐大家使用 BrowserRouter，此API不再作多余介绍。

（2）<Route>    demo1 demo3
1. 当页面的访问地址与 Route 上的 path 匹配时，就渲染出对应的 UI 界面。
2. path: string
如果不给path，那么路由将总是匹配。
3. <Route>自带三个render method和三个props
1）Route render methods ：
<Route component>
<Route render>
<Route children>
每种 render method 都有不同的应用场景，同一个<Route> 应该只使用一种 render method ，大部分情况下使用component 。
2）props 分别是：
match
location
history
每种render method 都会被传入相同的3个路由属性
4. 
1）component
指定只有当位置匹配时才会渲染的 React 组件，该组件会接收 route props 作为属性。
<Route path="/user/:username" component={User} />

const User = ({ match }) => { //props
  return <h1>Hello {match.params.username}!</h1> //props.match.params
2) render: func
此方法适用于内联渲染，可以传入一个函数，以在位置匹配时调用，而不是使用 component 创建一个新的 React 元素。
// 内联渲染
<Route path="/home" render={() => <h1>Home</h1} />
// 包装 组合
const FadingRoute = ({ component: Component, ...rest }) => (
  <Route {...rest} render={props => (
    <FadeIn>
      <Component {...props} />
    </FaseIn>
  )} />
)
<FadingRoute path="/cool" component={Something} />
3) children: func       
有时候你可能只想知道访问地址是否被匹配，然后改变下别的东西，而不仅仅是对应的页面。
<ul>
  <ListItemLink to="/somewhere" />
  <ListItemLink to="/somewhere-ele" />
</ul>
 
const ListItemLink = ({ to, ...rest }) => (
  <Route path={to} children={({ match }) => (
    <li className={match ? 'active' : ''}>
      <Link to={to} {...rest} />
    </li>
  )}
)
5.
1) exact: bool
如果为 true，则只有在 path 完全匹配 location.pathname 时才匹配
eg: path 为 '/one' 的路由将不能匹配 '/one/two'，反之，亦然。
2) strict: bool
对路径末尾斜杠的匹配。如果为 true。path 为 '/one/' 将不能匹配 '/one' 但可以匹配 '/one/two'。
如果要确保路由没有末尾斜杠，那么 strict 和 exact 都必须同时为 true
3) location: object
一般情况下，<Route> 尝试将其 path 与当前历史位置（通常是当前的浏览器 URL）进行匹配。但是，也可以传递具有不同路径名的位置进行匹配。
当你需要将 <Route> 与当前历史位置以外的 location 进行匹配时，此功能非常有用。如过渡动画示例中所示。
如果一个 <Route> 被包含在一个 <Switch> 中，并且需要匹配的位置（或当前历史位置）传递给了 <Switch>，那么传递给 <Route> 的 location 将被 <Switch> 所使用的 location 覆盖。
5. sensitive: bool
如果为 true，进行匹配时将区分大小写。

(3) <Link>
1. 为你的应用提供声明式的、可访问的导航链接。
2. to: string
作用：跳转到指定路径
使用场景：如果只是单纯的跳转就直接用字符串形式的路径。
<Link to='/courses?sort=name' />
3. to: object
作用：携带参数跳转到指定路径
作用场景：比如你点击的这个链接将要跳转的页面需要展示此链接对应的内容，又比如这是个支付跳转，需要把商品的价格等信息传递过去
其中属性：
pathname - 要链接到的路径
search - 查询参数
hash - URL 中的 hash，例如 #the-hash
state - 存储到 location 中的额外状态数据
<Link to={{
  pathname: '/courses',
  search: '?sort=name',
  hash: '#the-hash',
  state: {
    fromDashboard: true
  }
}} />
4.
replace: bool
当设置为 true 时，点击链接后将替换历史堆栈中的当前条目，而不是添加新条目。默认为 false。

innerRef: func
允许访问组件的底层引用。
const refCallback = node => {
  // node 指向最终挂载的 DOM 元素，在卸载时为 null
}
<Link to="/" innerRef={refCallback} />

others
你还可以传递一些其它属性，例如 title、id 或 className 等。
<Link to="/" className="nav" title="a title">About</Link>

(4) <NavLink>
这是 <Link> 的特殊版，顾名思义这就是为页面导航准备的。因为导航需要有 “激活状态”。
1) activeClassName: string
导航选中激活时候应用的样式名，默认样式名为 active
会在与当前 URL 匹配时为其呈现元素添加样式属性。
<NavLink
  to="/about"
  activeClassName="selected"
>MyBlog</NavLink>
2) activeStyle: object
如果不想使用样式名就直接写style
<NavLink
  to="/about"
  activeStyle={{ color: 'green', fontWeight: 'bold' }}
>MyBlog</NavLink>
3) exact: bool
若为 true，只有当访问地址严格匹配时激活样式/类才会应用
4) strict: bool
若为 true，只有当访问地址后缀斜杠严格匹配（有或无）时激活样式才会应用
5) isActive: func
决定导航是否激活，或者在导航激活时候做点别的事情。不管怎样，它不能决定对应页面是否可以渲染。
如果你要做的不仅仅是验证链接的路径名与当前 URL 的路径名相匹配，那么应该使用它。
// 只有当事件 id 为奇数时才考虑激活
const oddEvent = (match, location) => {
  if (!match) {
    return false;
  }
  const eventID = parseInt(match.params.eventID);
  return !isNaN(eventID) && eventID % 2 === 1;
}

<NavLink to="/events/123" isActive={oddEvent}>Event 123</NavLink>

（5）<Switch>   demo4
只渲染出第一个与当前访问地址匹配的子 <Route> 或 <Redirect>。
<Route path="/about" component={About}/>
<Route path="/:user" component={User}/>
<Route component={NoMatch}/>
如果你访问 /about，那么组件 About User Nomatch 都将被渲染出来，
因为他们对应的路由与访问的地址 /about 匹配。
这显然不是我们想要的，我们只想渲染出第一个匹配的路由就可以了，于是 <Switch> 应运而生！
//区别一下exact 和Switch
https://www.jianshu.com/p/ed5e56994f13
1）location: object
用于匹配子元素而不是当前历史位置（通常是当前的浏览器 URL）的 location 对象。
2）children: node
<Switch> 下的子节点只能是 <Route> 或 <Redirect> 元素。
只有与当前访问地址匹配的第一个子节点才会被渲染。
<Route> 元素用它们的 path 属性匹配，<Redirect> 元素使用它们的 from 属性匹配。
没有 path 属性的 <Route> 或者没有 from 属性的 <Redirect> 将始终与当前路径匹配。

当在 <Switch> 中包含 <Redirect> 时，你可以使用任何 <Route> 拥有的路径匹配属性：path、exact 和 strict。
from 只是 path 的别名。

(6) <Redirect>      demo5
<Redirect> 渲染时将导航到一个新地址，这个新地址覆盖在访问历史信息里面的本该访问的那个地址。
1.
<Route exact path="/" render={() => (
  loggedIn ? (
    <Redirect to="/dashboard" />
  ) : (
    <PublicHomePage />
  )
)} />
2.
to: string 新的
重定向的 URL 字符串
to: object
重定向的 location 对象
from: string
需要匹配的将要被重定向路径。 旧的
push: bool
若为true，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。

所有匹配的 URL 参数都会提供给 to，必须包含在 to 中用到的所有参数，to 未使用的其它参数将被忽略。
只能在 <Switch> 组件内使用 <Redirect from>，以匹配一个位置。
<Switch>
  <Redirect from='/old-path' to='/new-path' />
  <Route path='/new-path' component={Place} />
</Switch>

// 根据匹配参数进行重定向
<Switch>
  <Redirect from='/users/:id' to='/users/profile/:id' />
  <Route path='/users/profile/:id' component={Profile} />
</Switch>
经过实践，发现以上“根据匹配参数进行重定向”的示例存在bug，没有效果。
to 中的 :id 并不会继承 from 中的 :id 匹配的值，而是直接作为字符串显示到浏览器地址栏！！！

(7)Prompt       demo6
当用户离开当前页面前做出一些提示。
当你的应用程序进入一个应该阻止用户导航的状态时（比如表单只填写了一半），弹出一个提示。

message: string
当用户离开当前页面时，设置的提示信息。
<Prompt message="确定要离开？" />

message: func
当用户离开当前页面时，设置的回掉函数
将在用户试图导航到下一个位置时调用。需要返回一个字符串以向用户显示提示，或者返回 true 以允许直接跳转。
<Prompt message={location => {
  const isApp = location.pathname.startsWith('/app');

  return isApp ? `你确定要跳转到${location.pathname}吗？` : true;
}} />
上例中的 location 对象指的是下一个位置（即用户想要跳转到的位置）
你可以基于它包含的一些信息，判断是否阻止导航，或者允许直接跳转

when: bool
通过设置一定条件要决定是否启用 Prompt

(8) <Router>
所有 Router 组件的通用低阶接口。通常情况下，应用程序只会使用其中一个高阶 Router：
<BrowserRouter>
<HashRouter>
<MemoryRouter>
<NativeRouter>
<StaticRouter>

（二）对象和方法
1. history对象
history 对象通常具有以下属性和方法：
length: number 浏览历史堆栈中的条目数
action: string 路由跳转到当前页面执行的动作，分为 PUSH, REPLACE, POP
location: object 当前访问地址信息组成的对象，具有如下属性：
pathname: string URL路径
search: string URL中的查询字符串
hash: string URL的 hash 片段
state: string 例如执行 push(path, state) 操作时，location 的 state 将被提供到堆栈信息里，state 只有在 browser 和 memory history 有效。
push(path, [state]) 在历史堆栈信息里加入一个新条目。
replace(path, [state]) 在历史堆栈信息里替换掉当前的条目
go(n) 将 history 堆栈中的指针向前移动 n。
goBack() 等同于 go(-1)
goForward 等同于 go(1)
block(prompt) 阻止跳转

history 对象是可变的，因为建议从 <Route> 的 prop 里来获取 location，
而不是从 history.location 直接获取。这样可以保证 React 在生命周期中的钩子函数正常执行，例如以下代码：
class Comp extends React.Component {
  componentWillReceiveProps(nextProps) {
    // locationChanged
    const locationChanged = nextProps.location !== this.props.location
    // 错误方式，locationChanged 永远为 false，因为history 是可变的
    const locationChanged = nextProps.history.location !== this.props.history.location
  }
}
2. location
location 是指你当前的位置，将要去的位置，或是之前所在的位置
{
  key: 'sdfad1'
  pathname: '/about',
  search: '?name=minooo'
  hash: '#sdfas',
  state: {
    price: 123
  }
}
在以下情境中可以获取 location 对象
在 Route component 中，以 this.props.location 获取
在 Route render 中，以 ({location}) => () 方式获取
在 Route children 中，以 ({location}) => () 方式获取
在 withRouter 中，以 this.props.location 的方式获取
location 对象不会发生改变，因此可以在生命周期的回调函数中使用 location 对象来查看当前页面的访问地址是否发生改变。
这种技巧在获取远程数据以及使用动画时非常有用
componentWillReceiveProps(nextProps) {
  if (nextProps.location !== this.props.location) {
    // 已经跳转了！
  }
}

可以在不同情境中使用 location：
<Link to={location} />
<NaviveLink to={location} />
<Redirect to={location />
history.push(location)
history.replace(location)

3. match
match 对象包含了 <Route path> 如何与 URL 匹配的信息，具有以下属性：
params: object 路径参数，通过解析 URL 中的动态部分获得键值对
isExact: bool 为 true 时，整个 URL 都需要匹配
path: string 用来匹配的路径模式，用于创建嵌套的 <Route>
url: string URL 匹配的部分，用于嵌套的 <Link>
在以下情境中可以获取 match 对象
在 Route component 中，以 this.props.match获取
在 Route render 中，以 ({match}) => () 方式获取
在 Route children 中，以 ({match}) => () 方式获取
在 withRouter 中，以 this.props.match的方式获取
matchPath 的返回值
当一个 Route 没有 path 时，它会匹配一切路径